#!/bin/python2
from functools import partial
import argparse
import json
import os
import re
import requests
import sys

CLIENT_ERROR = 422
API_BASE_URL = "https://api.github.com/"


def request(*args, **kwargs):
    raise Exception("The '_setup_auth' function must be called once "
                    "before a request can be made")


def _setup_auth(user, password):
    """
    Sets up basic authentication to use with HTTP requests

    Args:
        user (str): GitHub user name
        password (str): GitHub user password or token
    """
    auth = (user, password)
    global request
    request = partial(_request, auth)


def _request(auth, method, url, **kwargs):
    """
    Makes HTTP requests.

    Args:
        auth (tuple): user credentials
        method (str): HTTP method
        url (str): REST API endpoint URL

    Returns:
        dict: HTTP response
    """
    methods = {
        'POST': requests.post,
        'GET': requests.get,
    }

    r = methods[method](url, auth=auth, **kwargs)
    response = json.loads(r.text)

    try:
        r.raise_for_status()
    except requests.exceptions.HTTPError as exc:
        if r.status_code in [CLIENT_ERROR]:
            error_msg = response['errors'][0]['message']
            raise Exception(error_msg)
        raise

    return response


def _print_dict(_dict):
    """
    Prints a dict in a key=value format.

    Args:
        _dict (dict): values to be formatted
    """
    for k, v in _dict.items():
        print '%s="%s"' % (k, v)


class Comment:
    """
    https://developer.github.com/v3/issues/comments/
    """
    def __init__(self, repo, issue_number):
        """
        Args:
            repo (str): target repository path. Format
                <repo owner>/<repo>
            issue_number (str): number of the issue or pull-request
        """
        # for GitHub API, pull-requests are just "issues with code",
        # so both issues and pull-requests comments fall into this
        # class scope
        self._endpoint = os.path.join(
            API_BASE_URL, "repos/%(repo)s/issues/%(number)s/comments" % dict(
                repo=repo, number=issue_number))

    def create(self, text):
        """
        Creates a new comment

        Args:
            text (str): comment text
        """
        request('POST', self._endpoint, data=json.dumps({"body": text}))


class Status:
    """
    https://developer.github.com/v3/repos/statuses/
    """
    def __init__(self, repo, reference):
        """
        Args:
            repo (str): target repository path. Format:
                <repo owner>/<repo>
            reference (str): git reference or GitHub pull request
                number
        """
        self.ref = reference
        self._url = os.path.join(
            API_BASE_URL,
            "repos/%(repo)s/commits/%(reference)s/status" % dict(
                repo=repo, reference=reference))
        self.get()

    def get(self):
        """
        Gets the status
        """
        status_info = request('GET', self._url)

        self.num_contexts = status_info['total_count']

        self.latest = {}
        for status in status_info['statuses']:
            context = status['context']
            status.pop('context')
            self.latest[context] = status


class PullRequest:
    """
    https://developer.github.com/v3/pulls/
    """
    def __init__(self, repo, number=None):
        """
        Args:
            repo (str): git repository path. Format: <repo owner>/<repo>
            number (int): pull-request number
        """
        self.repo = repo
        self._url = os.path.join(
            API_BASE_URL, "repos/%(repo)s/pulls" % dict(repo=self.repo))

        if number:
            self._set_attributes(self.get(number))

    def open(self, title, body, src_branch, dst_branch):
        """
        Opens a GitHub pull-request

        Args:
            title (str): title text
            body (str): body text
            src_branch (str): source branch. May be a reference to a
                branch in another user's repo. Format: [user:]<branch>
            dst_branch (str): destination branch
        """
        payload_body = {
            "title": title,
            "body": body,
            "head": src_branch,
            "base": dst_branch,
        }

        self._set_attributes(
            request('POST', self._url, data=json.dumps(payload_body)))

    def get(self, pr_number):
        """
        Gets a GitHub pull-request

        Args:
            pr_number (int): pull-request number

        Returns:
            dict: pull-request information. See
                https://developer.github.com/v3/pulls/#get-a-single-pull-request
        """
        url = os.path.join(self._url, str(pr_number))

        pr_info = request('GET', url)

        self.reference = pr_info['head']['sha']

        return pr_info

    def _set_attributes(self, pr_info):
        """
        Sets this class' attributes

        Args:
            pr_info (dict): information about a GitHub pull request
        """

        for k, v in pr_info.items():
            # just set the simple types that can later be accessed by
            # pull_request.attr. Ignore dicts for now because they
            # represent concepts that will require their own classes
            if type(v) != dict:
                setattr(self, k, v)


def open_pull_request(title, src_branch, repo, dst_branch, body=""):
    """
    Handler for the open_pr command. Opens a GitHub pull-request.

    Args:
        title (str): title text
        src_branch (str): source branch. Format: [user:]<branch>
        repo (str): destination repository. Format: <repo owner>/<repo>
        dst_branch (str): destination branch
        body (str): body text
    """
    pr = PullRequest(repo)
    pr.open(title, body, src_branch, dst_branch)


def query_pull_request(repo, number, **kwargs):
    """
    Handler for the query_pr command. Returns information about a
    GitHub pull-request.

    Args:
        repo (str): target repository path. Format: <repo owner>/<repo>
        number (int): pull-request number
        kwargs: keys being queried in the form: key=True
    """
    pr = PullRequest(repo, number)

    if all(not v for v in kwargs.values()):
        kwargs['title'] = True

    return {k:getattr(pr, k) for k, v in kwargs.items() if v}


def query_status(repo, reference, context, **kwargs):
    """
    Handler for the query_status command. Returns information about
    the status of a GitHub issue or pull-request.

    Args:
        repo (str): target repository path. Format:
            <repo owner>/<repo>
        reference (str): git reference. Either a sha1 or a
            pull-request number
        context (str): status context to query
        kwargs: keys being queried in the form: key=True
    """
    try:
        # if we were given a number as the reference, interpret is as
        # a pull-request number
        int(reference)
        pr = PullRequest(repo, reference)
        reference = pr.reference
    except:
        pass

    status = Status(repo, reference)
    if not status.num_contexts or context not in status.latest:
        sys.stderr.write('No %s context. Its build might not have spawned yet.' % context)
        # We don't want to raise an exception here because this kind
        # of situation happens too often. For instance, every time a
        # PR is updated or when a build trigger hasn't run yet.
        return

    if all(not v for v in kwargs.values()):
        kwargs['state'] = True

    return {k:status.latest[context][k] for k, v in kwargs.items() if v}


def create_comment(repo, number, text):
    """
    Handler for the write_comment command. Writes a comment to a
    GitHub issue or pull-request

    Args:
        repo (str): target repository path. Format
            <repo owner>/<repo>
        number (str): number of the issue or pull-request
        text (str): comment text
    """
    comment = Comment(repo, number)
    comment.create(text)


if __name__ == '__main__':
    commands = {
        'open_pr': {
            'description': "Opens GitHub pull-requests",
            'function': open_pull_request,
            'arguments': [
                (('title',), dict(help='pull request title text')),
                (('src_branch',), dict(metavar='src-branch',
                    help='pull request source branch: [user:]<branch>')),
                (('repo',), dict(
                    help='destination repository: <repo owner>/<repo>')),
                (('dst_branch',), dict(metavar='dst-branch',
                    help='pull request destination branch: <branch>')),
                (('--body',), dict(help='pull request body text')),
            ],
        },
        'query_pr': {
            'description': "Get information about a GitHub pull-request",
            'function': query_pull_request,
            'arguments': [
                (('repo',), dict(
                    help='target repository path: <repo owner>/<repo>')),
                (('number',), dict(help='pull request number', type=int)),
                (('--title',), dict(
                    help='get pull request title text', action='store_true')),
                (('--state',), dict(
                    help='get pull request state, i.e. open, closed',
                    action='store_true')),
                (('--merged',), dict(
                    help='get whether the pull request is merged',
                    action='store_true')),
                (('--mergeable',), dict(
                    help='get whether the pull request can be merged',
                    action='store_true')),
            ],
        },
        'query_status': {
            'description': ("Get information about the status of a GitHub "
                            "reference. This refers to the 'votes' that a "
                            "commit or pull-request receives"),
            'function': query_status,
            'arguments': [
                (('repo',), dict(
                    help='target repository path: <repo owner>/<repo>')),
                (('reference',), dict(
                    help=("git reference. Either a sha1 or a "
                          "pull-request number"))),
                (('context',), dict(
                    help=("status context to query. This is the 'name' "
                          "of the status, e.g. 'Pylint'"))),
                (('--target-url',), dict(
                    help='URL to the build output', action='store_true')),
                (('--state',), dict(
                    help=('pull request state, i.e. success, failure, '
                          'error, pending'),
                    action='store_true')),
            ],
        },
        'write_comment': {
            'description': ("Write a comment in a GitHub issue or pull-request"),
            'function': create_comment,
            'arguments': [
                (('repo',), dict(
                    help='target repository path: <repo owner>/<repo>')),
                (('number',), dict(help='number of the issue or pull-request')),
                (('text',), dict(help="text of the comment")),
            ],
        },
    }

    parser = argparse.ArgumentParser(description='Wrapper to GitHub API')
    parser.add_argument('user', help='github user name')
    parser.add_argument('password', help='github password or token')

    subparsers = parser.add_subparsers(dest='command')

    for cmd_name, cmd in commands.items():
        _parser = subparsers.add_parser(cmd_name,
                                        description=cmd['description'])

        for arg_name, arg_opts in cmd['arguments']:
            _parser.add_argument(*arg_name, **arg_opts)

    args = parser.parse_args()
    cmd_parser = subparsers.choices[args.command]

    # just so we can use **cmd_args below. The slicing of argv is to
    # exclude the positional params in the main parser plus the
    # program and command names which are not known by the subparser
    cmd_args = vars(cmd_parser.parse_args(sys.argv[4:]))

    _setup_auth(args.user, args.password)

    for key, value in cmd_args.items():
        if value is None:
            cmd_args.pop(key)

    cmd_output = commands[args.command]['function'](**cmd_args)
    if cmd_output:
        _print_dict(cmd_output)
